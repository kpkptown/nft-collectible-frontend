{"ast":null,"code":"var _jsxFileName = \"/Users/takahashiasuka/web3-practice/Polygon-Generative-NFT/nft-collectible-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport squirrelImg from './assets/rinkeby_squirrels.gif';\nimport \"./App.css\";\nimport contract from \"./contracts/NFTCollectible.json\";\nimport { ethers } from \"ethers\";\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contractAddress = \"0x1e35ba89B3Db80FE502691cDAa377B5BBD155E1b\";\nconst abi = contract.abi;\n\nfunction App() {\n  _s();\n\n  // async function checkWalletIsConnected() {\n  const checkWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\");\n    }\n\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const connectWalletHandler = async () => {\n    const {\n      ethereum\n    } = window;\n\n    if (!ethereum) {\n      alert(\"Please install MetaMask!\");\n    }\n\n    try {\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const mintNftHandler = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n        console.log(\"Initialize payment\");\n        let nftTxn = await nftContract.mintNFTs(1, {\n          value: ethers.utils.parseEther(\"0.01\")\n        });\n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: ${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const connectWalletButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  };\n\n  const mintNftButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mintNftHandler,\n      className: \"cta-button mint-nft-button\",\n      children: \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  };\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        opensea: abi\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"banner-img\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: squirrelImg,\n            alt: \"Polygon Squirrels\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }, this), currentAccount ? mintNftButton() : connectWalletButton()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        address: contractAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vg9h9hqTAVJVjklrPXRRIAqzLN0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","squirrelImg","contract","ethers","Footer","Header","contractAddress","abi","App","checkWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setCurrentAccount","currentAccount","connectWalletHandler","alert","err","mintNftHandler","provider","providers","Web3Provider","signer","getSigner","nftContract","Contract","nftTxn","mintNFTs","value","utils","parseEther","wait","hash","connectWalletButton","mintNftButton"],"sources":["/Users/takahashiasuka/web3-practice/Polygon-Generative-NFT/nft-collectible-frontend/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport squirrelImg from './assets/rinkeby_squirrels.gif';\nimport \"./App.css\";\nimport contract from \"./contracts/NFTCollectible.json\";\nimport { ethers } from \"ethers\";\nimport Footer from './components/Footer';\nimport Header from './components/Header';\n\nconst contractAddress = \"0x1e35ba89B3Db80FE502691cDAa377B5BBD155E1b\";\nconst abi = contract.abi;\n\nfunction App() {\n  // async function checkWalletIsConnected() {\n  const checkWalletIsConnected = async () => {\n    const { ethereum } = window;\n  \n    if (!ethereum) {\n      console.log(\"Make sure you have MetaMask installed!\");\n      return;\n    } else {\n      console.log(\"Wallet exists! We're ready to go!\");\n    }\n\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account: \", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  const [currentAccount, setCurrentAccount] = useState(null);\n\n  const connectWalletHandler = async() => {\n    const { ethereum } = window;\n    if(!ethereum) {\n      alert(\"Please install MetaMask!\");\n    }\n    try {\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      console.log(\"Found an account! Address: \", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const mintNftHandler = async () => {\n    try {\n      const { ethereum } = window;\n  \n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(contractAddress, abi, signer);\n        console.log(\"Initialize payment\");\n\n        let nftTxn = await nftContract.mintNFTs(1, {\n          value: ethers.utils.parseEther(\"0.01\"),\n        });\n  \n        console.log(\"Mining... please wait\");\n        await nftTxn.wait();\n  \n        console.log(`Mined, see transaction: ${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object does not exist\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const connectWalletButton = () => {\n    return (\n      <button\n        onClick={connectWalletHandler}\n        className=\"cta-button connect-wallet-button\"\n      >\n        Connect Wallet\n      </button>\n    );\n  };\n\n  const mintNftButton = () => {\n    return (\n      <button onClick={mintNftHandler} className=\"cta-button mint-nft-button\">\n        Mint NFT\n      </button>\n    );\n  };\n\n  useEffect(() => {\n    checkWalletIsConnected();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n      <Header opensea={abi} />\n      <div className=\"header-container\">\n        <div className='banner-img'>\n          <img src={squirrelImg} alt=\"Polygon Squirrels\" />\n        </div>\n        {currentAccount ? mintNftButton() : connectWalletButton()}\n      </div>\n      <div></div>\n      <Footer address={contractAddress} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}